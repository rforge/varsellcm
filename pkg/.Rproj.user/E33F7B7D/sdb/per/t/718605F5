{
    "contents" : "\n\n\n\nVarSelModelSelection <- function(x, g, nbinit=20,  parallel=TRUE){\n  if (parallel == FALSE){\n    \n     reference <- new(\"VSLCMresults\", criteria = new(\"VSLCMcriteria\", likelihood=-Inf, BIC=-Inf, ICL=-Inf, MICL=-Inf))\n     for (it in 1:nbinit){\n       cand <- OptimizeMICL(VarSelStartingPoint(x, g), 1)\n       if (cand@criteria@MICL > reference@criteria@MICL)\n         reference <- cand\n     }\n     \n  }else{\n    \n    reference <- list()\n    for (it in 1:nbinit)\n      reference[[it]] <- VarSelStartingPoint(x, g)\n    \n    nb.cpus <- min(detectCores(all.tests = FALSE, logical = FALSE) , nbinit)\n    reference <- mclapply(X = reference,\n                        FUN = OptimizeMICL,\n                        optimize=1,\n                        mc.cores = nb.cpus,\n                        mc.preschedule = TRUE,\n                        mc.cleanup = TRUE\n    )\n    tmp <- rep(0, nbinit)\n    for (it in 1:nbinit)\n      tmp[it] <- reference[[it]]@criteria@MICL\n    \n    reference <- reference[[which(tmp == max(tmp))[1]]]    \n  }\n  \n  return( reference )\n}\n\nVarSelParamEstim <- function(obj){\n  \n  obj@criteria@likelihood <- 0\n  obj@criteria@BIC <- 0\n  obj@criteria@ICL <- 0\n  \n  obj@parameters@means <- matrix(0, obj@model@g, ncol(obj@data))\n  rownames(obj@parameters@means ) <- paste(\"Class\", 1:obj@model@g)\n  obj@parameters@variances <- matrix(0, obj@model@g, ncol(obj@data))\n  rownames(obj@parameters@variances ) <- paste(\"Class\", 1:obj@model@g)\n  \n  obj@partitions@zOPT <- as.numeric(obj@partitions@zOPT) + 1\n  \n  \n  if (sum(obj@model@omega) > 0){\n    discrim <- mixmodCluster(data = as.data.frame(obj@data[, which(obj@model@omega == 1)]),\n                             nbCluster = obj@model@g,\n                             models = mixmodGaussianModel(listModels = \"Gaussian_pk_Lk_Bk\")\n    )\n    if ((discrim@error == 1)||( discrim@bestResult@likelihood==0)){\n      tmp <- VSLCM_XEM(as.matrix(obj@data[, which(obj@model@omega == 1)]), obj@partitions@zOPT, obj@model@g)\n      obj@partitions@tik <- tmp$tik\n      obj@partitions@zMAP <- tmp$z\n      obj@criteria@likelihood <- tmp$loglike\n      obj@criteria@BIC <- tmp$bic\n      obj@parameters@proportions <- tmp$pi\n      obj@parameters@means[,which(obj@model@omega == 1)]<- tmp$means\n      obj@parameters@variances[, which(obj@model@omega == 1)]<- tmp$variances\n    }else{\n      obj@criteria@likelihood <- discrim@bestResult@likelihood\n      obj@criteria@BIC <- -discrim@bestResult@criterionValue/2\n      obj@partitions@zMAP <- discrim@bestResult@partition\n      obj@partitions@tik <- discrim@bestResult@proba\n      obj@parameters@proportions <- discrim@bestResult@parameters@proportions\n      obj@parameters@means[,which(obj@model@omega == 1)]<- discrim@bestResult@parameters@mean\n      for (k in 1:nrow(obj@parameters@variances)){\n        for (it in 1:sum(obj@model@omega)){\n          obj@parameters@variances[k, which(obj@model@omega == 1)[it]]<- discrim@bestResult@parameters@variance[[k]][it, it]\n        }\n      }\n    }\n\n  }\n  \n  if (any(obj@model@omega == 0) ){\n    discrim <- mixmodCluster(data = as.data.frame(obj@data[, which(obj@model@omega == 0)]),\n                             nbCluster = 1,\n                             models = mixmodGaussianModel(listModels = \"Gaussian_pk_Lk_Bk\")\n    )\n    if (discrim@error == 0){\n    \n      \n      obj@criteria@likelihood <- obj@criteria@likelihood + discrim@bestResult@likelihood\n      obj@criteria@BIC <- obj@criteria@BIC - discrim@bestResult@criterionValue/2\n      for (k in 1:obj@model@g){\n        obj@parameters@means[k, which(obj@model@omega == 0)] <- discrim@bestResult@parameters@mean\n        for (it in 1:sum(1 - obj@model@omega)){\n          obj@parameters@variances[k, which(obj@model@omega == 0)[it]]<- discrim@bestResult@parameters@variance[[1]][it, it]\n        }\n      }\n    }else{\n      for (j in  which(obj@model@omega == 0)){\n        me <- mean(obj@data[,j])\n        va <- var(obj@data[,j])\n        loglike <- sum( dnorm(obj@data[,j], me, sqrt(va), log = TRUE))\n        obj@criteria@likelihood <- obj@criteria@likelihood + loglike\n        obj@criteria@BIC <- obj@criteria@BIC + loglike - log(nrow(obj@data))\n      }     \n    }\n  }\n  \n\n\n    obj@criteria@ICL <- obj@criteria@BIC\n    if ((obj@model@g > 1) && (sum(obj@model@omega)>0)){\n      for (k in 1:obj@model@g)\n        obj@criteria@ICL <- obj@criteria@ICL + sum(log(obj@partitions@tik[which(obj@partitions@zMAP==k), k]))\n      \n    }\n    \n    \n    \n#     convert <- rep(0, obj@model@g)\n#     mat <- table(obj@partitions@zMAP, obj@partitions@zOPT + 2)\n#     \n#     for (j in 1:ncol(mat))\n#       convert[j] <- which(mat[,j] == max(mat[,j]))[1]\n#     \n#     if (length(unique(convert))==obj@model@g){\n#       tmp <- obj@partitions@zOPT\n#       for (j in 1:obj@model@g){\n#         obj@partitions@zOPT[which(tmp==j)] <- convert[j]\n#       }\n#     }\n  \n\n  \n  return(obj)\n}\n\nVarSelCluster <- function(x, g, nbinit=50, parallel = TRUE)\n  return( VarSelParamEstim(VarSelModelSelection(x, g, nbinit, parallel)) )\n\nVarSelModelKnown <- function(x, g, omega)\n  return( VarSelParamEstim(OptimizeMICL(VarSelStartingPoint(x, g, omega), 0)))\n",
    "created" : 1417169320575.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3394637270",
    "id" : "718605F5",
    "lastKnownWriteTime" : 1417169859,
    "path" : "~/Documents/Recherche/variable_selection/package/VarSelLCM/R/VarSelLCM.R",
    "project_path" : "R/VarSelLCM.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}